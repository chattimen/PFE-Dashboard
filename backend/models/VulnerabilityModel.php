<?php
/**
 * Modèle pour gérer les vulnérabilités dans la base de données
 */
class VulnerabilityModel {
    private $db;
    
    /**
     * Constructeur
     */
    public function __construct() {
        $this->db = Database::getInstance();
    }
    
    /**
     * Récupère toutes les vulnérabilités avec filtres optionnels
     */
    public function getAllVulnerabilities($filters = [], $limit = 100, $offset = 0) {
        $sql = "SELECT * FROM vulnerabilities WHERE 1=1";
        $params = [];
        
        // Appliquer les filtres
        if (!empty($filters['tool_name'])) {
            $sql .= " AND tool_name = ?";
            $params[] = $filters['tool_name'];
        }
        
        if (!empty($filters['severity'])) {
            $sql .= " AND severity = ?";
            $params[] = $filters['severity'];
        }
        
        if (!empty($filters['status'])) {
            $sql .= " AND status = ?";
            $params[] = $filters['status'];
        }
        
        if (!empty($filters['scan_id'])) {
            $sql .= " AND scan_id = ?";
            $params[] = $filters['scan_id'];
        }
        
        // Ajouter tri et pagination
        $sql .= " ORDER BY severity DESC, last_detected DESC";
        $sql .= " LIMIT ? OFFSET ?";
        $params[] = $limit;
        $params[] = $offset;
        
        return $this->db->fetchAll($sql, $params);
    }
    
    /**
     * Récupère une vulnérabilité par son ID
     */
    public function getVulnerabilityById($id) {
        $sql = "SELECT * FROM vulnerabilities WHERE id = ?";
        return $this->db->fetchOne($sql, [$id]);
    }
    
    /**
     * Ajoute une nouvelle vulnérabilité
     */
    public function addVulnerability($data) {
        $sql = "INSERT INTO vulnerabilities (
                    scan_id, tool_name, vulnerability_id, title, description, 
                    severity, category, location, remediation, status
                ) VALUES (
                    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
                ) RETURNING id";
        
        $params = [
            $data['scan_id'],
            $data['tool_name'],
            $data['vulnerability_id'] ?? null,
            $data['title'],
            $data['description'] ?? null,
            $data['severity'],
            $data['category'] ?? null,
            $data['location'] ?? null,
            $data['remediation'] ?? null,
            $data['status'] ?? 'open'
        ];
        
        $result = $this->db->query($sql, $params);
        return $result->fetch(PDO::FETCH_ASSOC)['id'];
    }
    
    /**
     * Met à jour une vulnérabilité existante
     */
    public function updateVulnerability($id, $data) {
        $fields = [];
        $params = [];
        
        // Construire dynamiquement les champs à mettre à jour
        foreach ($data as $key => $value) {
            if (in_array($key, ['title', 'description', 'severity', 'category', 'location', 'remediation', 'status'])) {
                $fields[] = "$key = ?";
                $params[] = $value;
            }
        }
        
        // Mettre à jour last_detected si la vulnérabilité est toujours présente
        if ($data['status'] !== 'fixed') {
            $fields[] = "last_detected = CURRENT_TIMESTAMP";
        }
        
        // Définir fixed_date si la vulnérabilité est marquée comme corrigée
        if ($data['status'] === 'fixed') {
            $fields[] = "fixed_date = CURRENT_TIMESTAMP";
        }
        
        if (empty($fields)) {
            return false;
        }
        
        // Ajouter l'ID à la fin des paramètres
        $params[] = $id;
        
        $sql = "UPDATE vulnerabilities SET " . implode(", ", $fields) . " WHERE id = ?";
        $this->db->query($sql, $params);
        
        return true;
    }
    
    /**
     * Récupère les statistiques des vulnérabilités
     */
    public function getVulnerabilityStats($filters = []) {
        $sql = "SELECT 
                    severity, 
                    COUNT(*) as count, 
                    status,
                    tool_name
                FROM 
                    vulnerabilities 
                WHERE 1=1";
        
        $params = [];
        
        // Appliquer les filtres
        if (!empty($filters['tool_name'])) {
            $sql .= " AND tool_name = ?";
            $params[] = $filters['tool_name'];
        }
        
        if (!empty($filters['status'])) {
            $sql .= " AND status = ?";
            $params[] = $filters['status'];
        }
        
        if (!empty($filters['days'])) {
            $sql .= " AND last_detected >= (CURRENT_DATE - INTERVAL '? days')";
            $params[] = $filters['days'];
        }
        
        $sql .= " GROUP BY severity, status, tool_name";
        
        return $this->db->fetchAll($sql, $params);
    }
    
    /**
     * Récupère les tendances des vulnérabilités au cours du temps
     */
    public function getVulnerabilityTrends($days = 30) {
        $sql = "WITH dates AS (
                    SELECT generate_series(
                        CURRENT_DATE - INTERVAL '? days',
                        CURRENT_DATE,
                        '1 day'::interval
                    ) AS date
                )
                SELECT 
                    dates.date,
                    COALESCE(COUNT(v.id) FILTER (WHERE v.severity = 'critical'), 0) as critical,
                    COALESCE(COUNT(v.id) FILTER (WHERE v.severity = 'high'), 0) as high,
                    COALESCE(COUNT(v.id) FILTER (WHERE v.severity = 'medium'), 0) as medium,
                    COALESCE(COUNT(v.id) FILTER (WHERE v.severity = 'low'), 0) as low
                FROM 
                    dates
                LEFT JOIN scans s ON 
                    dates.date = date_trunc('day', s.scan_date)
                LEFT JOIN vulnerabilities v ON 
                    s.id = v.scan_id AND v.status = 'open'
                GROUP BY 
                    dates.date
                ORDER BY 
                    dates.date ASC";
        
        return $this->db->fetchAll($sql, [$days]);
    }
}